import { app } from "./app";
import dotenv from "dotenv";
import { PrismaClient } from "@prisma/client";
import { testErrorEmail } from "./utils/testErrorEmail";

// Initialiser dotenv au d√©but de l'application
dotenv.config();

const prisma = new PrismaClient();

const port = process.env.PORT || 3000;

// Fonction pour tester la connexion √† la base de donn√©es
async function testDatabaseConnection() {
  try {
    const userCount = await prisma.user.count();
    const noteCount = await prisma.note.count();
    console.log("‚úÖ Connexion √† la base de donn√©es r√©ussie !");
    console.log(`üìä Nombre d'utilisateurs dans la base : ${userCount}`);
    console.log(`üìä Nombre de notes dans la base : ${noteCount}`);
  } catch (error) {
    console.error("‚ùå Erreur de connexion √† la base de donn√©es :", error);
    process.exit(1);
  }
}

// Stocker le serveur dans une variable pour pouvoir le fermer proprement
const server = app.listen(port, async () => {
  console.log(`üöÄ Serveur d√©marr√© sur le port ${port}`);
  await testDatabaseConnection();

  // Test d'envoi d'email sur erreur avec la configuration port 587
  // if (process.env.NODE_ENV === "development") {
  //   console.log(
  //     "üß™ Test de notification par email (port 587) : une erreur sera g√©n√©r√©e dans 10 secondes...",
  //   );
  //   testErrorEmail(10000); // G√©n√©rer une erreur apr√®s 10 secondes
  // }
});

// Fonction d'arr√™t gracieux
const gracefulShutdown = async (signal: string) => {
  console.log(`üõë Signal ${signal} re√ßu. Arr√™t gracieux en cours...`);

  const forceExit = setTimeout(() => {
    console.error("‚ö†Ô∏è Impossible de fermer les connexions, arr√™t forc√©");
    process.exit(1);
  }, 10000); // 10 secondes maximum

  try {
    // 1. Arr√™ter d'accepter de nouvelles requ√™tes HTTP
    server.close(() => {
      console.log("‚úÖ Serveur HTTP arr√™t√©");
    });

    // 2. Fermer les connexions √† la base de donn√©es
    await prisma.$disconnect();
    console.log("‚úÖ Connexion √† la base de donn√©es ferm√©e");

    // 3. Autres nettoyages (cache Redis, files d'attente, etc.)
    // Ajoutez ici d'autres fermetures de connexions si n√©cessaire

    clearTimeout(forceExit);
    console.log("üëã Arr√™t gracieux termin√© avec succ√®s");
    process.exit(0);
  } catch (err) {
    console.error("‚ùå Erreur lors de l'arr√™t gracieux:", err);
    process.exit(1);
  }
};

// G√©rer les signaux d'arr√™t
process.on("SIGTERM", () => gracefulShutdown("SIGTERM"));
process.on("SIGINT", () => gracefulShutdown("SIGINT"));

// Exporter le serveur et le client Prisma pour les utiliser ailleurs si n√©cessaire
export { server, prisma };
